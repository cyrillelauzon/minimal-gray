/*****************************************************************************
animations.scss

Helpers gestion des animations CSS
/******************************************************************************/


//variables
$shortSpeed : 0.3s;
$shortSlide : 0.5s;


//Transition: FadeIn
@keyframes fadeInAnimation {
    0% {
        opacity: 0;
    }

    100% {
        opacity: 1;
    }
}

@mixin quickFadeInAnimation {
    animation: fadeInAnimation ease-in-out $shortSpeed ;
    animation-iteration-count: 1;
    animation-fill-mode: forwards;
}


//Transition: SlideIn
@keyframes SlideInAnimation {
    0% {
        //opacity: 0;
        transform: translate(100%, 0);
    }

    100% {
        //opacity: 1;
        transform: translate(0, 0);
    }
}

//Transition: SlideOut
@keyframes SlideOutAnimation {
    0% {
        //opacity: 1;
        transform: translate(0, 0);
    }

    100% {
        //opacity: 0;
        transform: translate(100%, 0);
    }
}


.quickSlideInAnimation {
    animation: SlideInAnimation ease-in $shortSlide ;
}

.quickSlideOutAnimation {
    animation: SlideOutAnimation ease-in-out $shortSlide ;
}




//Formule générique pour animer une transition sur propriété donnée
@mixin animateTransition($property, $src, $dest) {
    #{$property}: $dest;
    transition: #{$property} $shortSpeed ease-in-out;

    &:hover {
        #{$property}: $src;
        transition: #{$property} $shortSpeed ease-in-out;
    }
}

//Raccourci pour uniformiser les fade-in fade-out d'éléments à travers le site
@mixin opacityFadeOnHover($opacity) {
   @include animateTransition(opacity, $opacity, 1);
}

//Uniformisation des changements de couleur sur Hover
@mixin colorChangeOnHover($src, $dest) {
    @include animateTransition(color, $dest, $src);  //src et dest inversés pour respecter logique de animateTransition
 }